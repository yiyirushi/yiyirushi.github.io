<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前后端交互约定_规范</title>
    <url>//pages/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E7%BA%A6%E5%AE%9A%E3%80%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="前后端交互约定、规范"><a href="#前后端交互约定、规范" class="headerlink" title="前后端交互约定、规范"></a>前后端交互约定、规范</h1><h3 id="一、结合目前公司情况的痛点总结"><a href="#一、结合目前公司情况的痛点总结" class="headerlink" title="一、结合目前公司情况的痛点总结"></a>一、结合目前公司情况的痛点总结</h3><ol>
<li>部分开发人员思想：只要前端开发能做的，那就交给前端做；前端做，服务器没性能问题</li>
<li>接口输出和原型不符合，前端需要调用多个接口，进行数据重组转换实现单一功能</li>
<li>前端在数据对接和处理上耗费太多精力，应该重心偏移，更注重UI和交互体验</li>
</ol>
<span id="more"></span>

<h3 id="二、职责分离"><a href="#二、职责分离" class="headerlink" title="二、职责分离"></a>二、职责分离</h3><table>
<thead>
<tr>
<th><strong>后端</strong></th>
<th><strong>前端</strong></th>
</tr>
</thead>
<tbody><tr>
<td>提供数据</td>
<td>接受数据，返回数据</td>
</tr>
<tr>
<td>处理业务逻辑，关注服务层，程序的可靠性、稳定性、接口性能、安全性以及数据完整性、一致性等</td>
<td>处理渲染逻辑，关注视图层，用户体验效果、页面性能（因为客户看到的是最终页面，页面效果以及数据呈现效果的好坏是最能反映客户的满意度的。客户不关注你用了什么牛逼的技术）</td>
</tr>
<tr>
<td>代码跑在服务器上</td>
<td>代码跑在浏览器上</td>
</tr>
</tbody></table>
<h3 id="三、设计规范原则"><a href="#三、设计规范原则" class="headerlink" title="三、设计规范原则"></a>三、设计规范原则</h3><ol>
<li>前端应只关注渲染逻辑，而不应该关注数据的处理逻辑。接口返回的数据应该是能够直接展示在界面上的。</li>
<li>一个功能应避免多个接口嵌套调用获取数据，后台应该处理好一次性返回。</li>
<li>响应格式应该是JSON，而且应避免多级JSON的出现；</li>
<li>后端如果需要界面实时刷新数据，不应该要求前端定时器轮询，而要提供类似webSocket之类的功能。</li>
</ol>
<blockquote>
<p>根据这个原则，后端返回的数据应该是所见即所得的数据，而不应该是一层包一层的复杂的JSON，需要前端额外来处理很复杂的去重，排序、深浅拷贝，变形等处理。前端在渲染每一个div，每一个table的cell时，不用担心数据结构会不会不一致的问题。</p>
</blockquote>
<h3 id="四、要达到的目的"><a href="#四、要达到的目的" class="headerlink" title="四、要达到的目的"></a>四、要达到的目的</h3><ol>
<li>尽可能的缩小沟通成本，开最少的会，确定大部分的事情</li>
<li>花最少的时间来写文档，形成统一规范，哪怕不看文档，也知道各种接口的大致逻辑</li>
<li>不写重复代码</li>
<li>尽可能写高可读性的代码</li>
</ol>
<h3 id="五、规范等级标识"><a href="#五、规范等级标识" class="headerlink" title="五、规范等级标识"></a>五、规范等级标识</h3><p>A：对前端很重要；严格遵守</p>
<p>B：对前端很重要，可能有特殊情况；原则上严格遵守，万一特殊情况需要和前端开发讨论</p>
<p>C：对前端一般重要；尽量遵守，不遵守不需要和前端讨论，引发后果后端开发自己解决</p>
<p>D：建议</p>
<p>E：现阶段不考虑，后续有条件再说</p>
<h3 id="六、一般规范"><a href="#六、一般规范" class="headerlink" title="六、一般规范"></a>六、一般规范</h3><h4 id="1、协作流程规范"><a href="#1、协作流程规范" class="headerlink" title="1、协作流程规范"></a>1、协作流程规范</h4><p>1.1 需求分析。确保大家对需求有一致的认知；（A）</p>
<p>1.2 设计接口文档。需要相关开发人员进行接口评审，前端需要确认是否符合要求；（A）</p>
<p>1.3 并行开发。前端需要根据接口文档进行Mock, 模拟对接后端接口；（E）</p>
<p>1.4 真实环境联调。联调之前，要求后端做好接口测试；前端将接口请求代理到后端服务，进行真实环境联调；（A）</p>
<h4 id="2、接口文档规范"><a href="#2、接口文档规范" class="headerlink" title="2、接口文档规范"></a>2、接口文档规范</h4><p>2.1 接口需要产出接口文档；（A）</p>
<p>2.2 文档要有接口名称、请求方式、请求参数和响应参数，对应的字段说明，类型说明，是否必填；（A）</p>
<p>2.3 接口文档需要相关开发人员一起评审；（A）</p>
<p>2.4对接完成的接口如要变更数据结构，增删参数值，需要和前端讨论，前端需要知道变更影响范围和难易程度，和调整地方；（A）</p>
<h4 id="3、URL语义化规范-x20"><a href="#3、URL语义化规范-x20" class="headerlink" title="3、URL语义化规范&#x20;"></a>3、URL语义化规范&#x20;</h4><blockquote>
<p>例： <code>协议</code> + <code>域名/IP</code> + <code>端口号</code> + <code>/api</code> + <code>/项目名</code> + <code>/模块名</code> + <code>/一级资源</code> + <code>/n级资源</code> + <code>/动作</code></p>
</blockquote>
<blockquote>
<p>关于版本号，可以在模块后增加<code>/v1/</code>等标识。</p>
</blockquote>
<h4 id="4、接口请求协议类型规范"><a href="#4、接口请求协议类型规范" class="headerlink" title="4、接口请求协议类型规范"></a>4、接口请求协议类型规范</h4><p>4.1 请求方式，只能用GET和POST；（A）</p>
<p>4.2 不使用resulful接口规范；（A）</p>
<p>4.3 GET只允许传0-2个基础数据类型的参数，重点：【GET方法不可在Body中放置参数】；（A）</p>
<p>4.4 POST Body只能是JSON格式（Content-Type&#x3D;application&#x2F;json），只有文件上传用formDate上传（Content-Type&#x3D;application&#x2F;x-www-form-urlencoded），文件名统一用file；（A）</p>
<p>4.5 Header只传全局参数，不传业务参数；（A）</p>
<p>4.6 避免频繁修改Header参数；（A）</p>
<p>4.7 不使用cookie；（A）</p>
<h4 id="5、响应结果规范"><a href="#5、响应结果规范" class="headerlink" title="5、响应结果规范"></a>5、响应结果规范</h4><p>5.1 所有返回数据需是合法JSON，尽量返回object或者array (二进制文件下载除外)；（A）</p>
<p>5.2 如果数据中包含类型为array的属性，当数据为空时，尽量返回空数组[]，避免返回null，需保持数据格式不变；（A）</p>
<p>5.3如果数据中包含类型为object的属性，当数据为空时，尽量返回空数组{}，避免返回null，需保持数据格式不变；（A）</p>
<p>5.4 返回值中应尽量避免包含无用信息，或者额外的数据结构，仅包含必要数据即可。必要数据指前端需要渲染的数据；（B）</p>
<p>5.5 只要有数据返回，接口请求成功，响应的http状态码必须是200；对应的业务状态码为code，在响应数据中定义；（A）</p>
<p>5.6 数据扁平化，JSON嵌套尽量不要超过三层，超过后应该采取其他实现方式；（C）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  timestamp: number; // 时间戳</span><br><span class="line">  code: number; // 后端状态码</span><br><span class="line">  message: string; // 请求返回消息</span><br><span class="line">  data: Object | Array; // 响应数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6、分页查询规范"><a href="#6、分页查询规范" class="headerlink" title="6、分页查询规范"></a>6、分页查询规范</h4><p>6.1 100条以下的数据可考虑前端分页；（A）</p>
<p>6.2 前端需要传：当前页pageNum，每页条数pageSize；（A）</p>
<p>6.3 后端返回：当前页pageNum，每页条数pageSize，总条数total，当页数据items；（A）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    pageNum: number;</span><br><span class="line">    pageSize: number;</span><br><span class="line">    total: number; // 数据总量</span><br><span class="line">    items: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7、状态码规范"><a href="#7、状态码规范" class="headerlink" title="7、状态码规范"></a>7、状态码规范</h4><blockquote>
<p>客户端的每一次请求，服务器都必须给出回应。回应必须包括 code码；</p>
</blockquote>
<p>7.1 固定状态码约定（A）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 10000: 成功</span><br><span class="line"># 40001: 登录过期</span><br><span class="line"># 41000: 缺少必选参数</span><br><span class="line"># 42000: 非法的参数</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>7.2 其他状态码分类，首字母为提示等级（D）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">前端后面需要可争对不同等级做不同处理，如：直接message提示；右上角悬浮notification提示；需要手动点确定的confirm提示</span><br><span class="line"></span><br><span class="line"># 1xxxx: </span><br><span class="line"># 2xxxx: </span><br><span class="line"># 3xxxx: </span><br></pre></td></tr></table></figure>



<h4 id="8、前端请求参数规范"><a href="#8、前端请求参数规范" class="headerlink" title="8、前端请求参数规范"></a>8、前端请求参数规范</h4><p>8.1 查询类接口，如果没选的条件，或者查询全部，则此字段不传给后台；（A）</p>
<p>8.2 提交类接口，前端字段不能删，如果没选，或者没填，前端传null 或者 “” ，数组对象同理，保持交互的数据格式不变；（A）</p>
<h4 id="9、时间日期类参数规范"><a href="#9、时间日期类参数规范" class="headerlink" title="9、时间日期类参数规范"></a>9、时间日期类参数规范</h4><p>9.1 时间日期格式为 yyyy-MM-dd hh:mm:ss  不允许有24:00:00；（A）</p>
<p>9.2 只有年月日的时间范围：前端传 yyyy-MM-dd 00:00:00    yyyy-MM-dd 23:59:59；（A）</p>
<p>9.3 只有年月日的单个日期：前端传 yyyy-MM-dd 00:00:00；（A）</p>
<h3 id="七、其他约定"><a href="#七、其他约定" class="headerlink" title="七、其他约定"></a>七、其他约定</h3><h4 id="7-1、数据状态变更，要单独写接口，不能复用编辑接口；（C）"><a href="#7-1、数据状态变更，要单独写接口，不能复用编辑接口；（C）" class="headerlink" title="7.1、数据状态变更，要单独写接口，不能复用编辑接口；（C）"></a>7.1、数据状态变更，要单独写接口，不能复用编辑接口；（C）</h4><blockquote>
<p>前端开发不强校验当前单据的状态，和流转后的状态，只提交动作，尽量分成多个接口，不要把提交，审核，删除等接口合并</p>
</blockquote>
<h4 id="7-2、列表查询和导出-参数、请求方式保持一致；（A）"><a href="#7-2、列表查询和导出-参数、请求方式保持一致；（A）" class="headerlink" title="7.2、列表查询和导出 参数、请求方式保持一致；（A）"></a>7.2、列表查询和导出 参数、请求方式保持一致；（A）</h4><blockquote>
<p>如果是整表导出，则导出只是少分页参数</p>
</blockquote>
<h4 id="7-3、表示同一意思的字段名，在一个系统中，如不可避免则在同一个功能模块中，不能起多个名字；（A）"><a href="#7-3、表示同一意思的字段名，在一个系统中，如不可避免则在同一个功能模块中，不能起多个名字；（A）" class="headerlink" title="7.3、表示同一意思的字段名，在一个系统中，如不可避免则在同一个功能模块中，不能起多个名字；（A）"></a>7.3、表示同一意思的字段名，在一个系统中，如不可避免则在同一个功能模块中，不能起多个名字；（A）</h4><blockquote>
<p>反例：如spuId、productId；img、productImg、imgUrl描述的是同一个意思</p>
</blockquote>
<h4 id="7-4、接口设计需要结合原型，避免跳转页面需要前端通过URL带大量数据的情况，前端URL跳转不能携带超过三个参数；（B）"><a href="#7-4、接口设计需要结合原型，避免跳转页面需要前端通过URL带大量数据的情况，前端URL跳转不能携带超过三个参数；（B）" class="headerlink" title="7.4、接口设计需要结合原型，避免跳转页面需要前端通过URL带大量数据的情况，前端URL跳转不能携带超过三个参数；（B）"></a>7.4、接口设计需要结合原型，避免跳转页面需要前端通过URL带大量数据的情况，前端URL跳转不能携带超过三个参数；（B）</h4><h4 id="7-5、后台参数要和原型对应，不能一个参数对应页面多个参数，或者是多个参数对应一个；（B）"><a href="#7-5、后台参数要和原型对应，不能一个参数对应页面多个参数，或者是多个参数对应一个；（B）" class="headerlink" title="7.5、后台参数要和原型对应，不能一个参数对应页面多个参数，或者是多个参数对应一个；（B）"></a>7.5、后台参数要和原型对应，不能一个参数对应页面多个参数，或者是多个参数对应一个；（B）</h4><blockquote>
<p>例：手机号，在原型上其实分成了区号，和手机号，那后台要对应两个字段，不应拼接在一起用一个字段表示。例2：前端展示价格，后台不能返回ABC多个价格，让前端根据条件判断显示哪个</p>
</blockquote>
<h4 id="7-6、后台返回的单据状态、类型要和原型上状态、类型一对一对应，前端不应该用其他附加字段判断状态；（A）"><a href="#7-6、后台返回的单据状态、类型要和原型上状态、类型一对一对应，前端不应该用其他附加字段判断状态；（A）" class="headerlink" title="7.6、后台返回的单据状态、类型要和原型上状态、类型一对一对应，前端不应该用其他附加字段判断状态；（A）"></a>7.6、后台返回的单据状态、类型要和原型上状态、类型一对一对应，前端不应该用其他附加字段判断状态；（A）</h4><blockquote>
<p>例：原型上有1、2、3个状态，后台数据库只设计1、2状态，不应让前端通过其他字段判断3状态，应该返回前端的数据就是1、2、3状态。反例：商城优惠券类型，前端需要根据具体的金额是否有值，反过去判断券类型</p>
</blockquote>
<h4 id="7-7、核心数据、敏感数据，前端应该不进行运算；后端也不应该接收前端传递的参数；（A）"><a href="#7-7、核心数据、敏感数据，前端应该不进行运算；后端也不应该接收前端传递的参数；（A）" class="headerlink" title="7.7、核心数据、敏感数据，前端应该不进行运算；后端也不应该接收前端传递的参数；（A）"></a>7.7、核心数据、敏感数据，前端应该不进行运算；后端也不应该接收前端传递的参数；（A）</h4><blockquote>
<p>例：界面上的库存、价格；结算所需要的价格等；前端运算尽量只能是优化体验</p>
</blockquote>
<h4 id="7-8、新增和编辑接口，尽可能写成一个，应该保持一样的数据结构，和字段名；（B）"><a href="#7-8、新增和编辑接口，尽可能写成一个，应该保持一样的数据结构，和字段名；（B）" class="headerlink" title="7.8、新增和编辑接口，尽可能写成一个，应该保持一样的数据结构，和字段名；（B）"></a>7.8、新增和编辑接口，尽可能写成一个，应该保持一样的数据结构，和字段名；（B）</h4><h4 id="7-9、查询详情的接口，应该和新增-编辑接口保持一样的数据结构，和字段名；（B）"><a href="#7-9、查询详情的接口，应该和新增-编辑接口保持一样的数据结构，和字段名；（B）" class="headerlink" title="7.9、查询详情的接口，应该和新增&#x2F;编辑接口保持一样的数据结构，和字段名；（B）"></a>7.9、查询详情的接口，应该和新增&#x2F;编辑接口保持一样的数据结构，和字段名；（B）</h4><h4 id="7-10、接口的附带前置条件需要后台自己校验；（A）"><a href="#7-10、接口的附带前置条件需要后台自己校验；（A）" class="headerlink" title="7.10、接口的附带前置条件需要后台自己校验；（A）"></a>7.10、接口的附带前置条件需要后台自己校验；（A）</h4><blockquote>
<p>例：下单接口：结算前，当前商品是否在收货的国家禁售，不应该是前端先调用【判断是否禁售】，再调用【下单接口】，是否禁售等逻辑应该直接做在下单接口上</p>
</blockquote>
<h4 id="7-11、接口对接完成后，相关开发人员都需要走一遍自测，通过再提测；（A）"><a href="#7-11、接口对接完成后，相关开发人员都需要走一遍自测，通过再提测；（A）" class="headerlink" title="7.11、接口对接完成后，相关开发人员都需要走一遍自测，通过再提测；（A）"></a>7.11、接口对接完成后，相关开发人员都需要走一遍自测，通过再提测；（A）</h4><h4 id="7-12、幂等性设计；（）"><a href="#7-12、幂等性设计；（）" class="headerlink" title="7.12、幂等性设计；（）"></a>7.12、幂等性设计；（）</h4><h4 id="7-13、接口Mock平台；（E）"><a href="#7-13、接口Mock平台；（E）" class="headerlink" title="7.13、接口Mock平台；（E）"></a>7.13、接口Mock平台；（E）</h4><h3 id="八、参考链接"><a href="#八、参考链接" class="headerlink" title="八、参考链接"></a>八、参考链接</h3><p><a href="https://developer.aliyun.com/article/835845" title=" 前后端分离必备的接口规范，十分接地气！-阿里云开发者社区 1. 前言 随着互联网的高速发展，前端页面的展示、交互体验越来越灵活、炫丽，响应体验也要求越来越高，后端服务的高并发、高可用、高性能、高扩展等特性的要求也愈加苛刻，从而导致前后端研发各自专注于自己擅长的领域深耕细作。 https://developer.aliyun.com/article/835845"> 前后端分离必备的接口规范，十分接地气！-阿里云开发者社区 1. 前言 随着互联网的高速发展，前端页面的展示、交互体验越来越灵活、炫丽，响应体验也要求越来越高，后端服务的高并发、高可用、高性能、高扩展等特性的要求也愈加苛刻，从而导致前后端研发各自专注于自己擅长的领域深耕细作。 https://developer.aliyun.com/article/835845</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1950586" title=" 22条API设计的最佳实践 - 腾讯云开发者社区-腾讯云 点击上方“芋道源码”，选择“设为星标” 管她前浪，还是后浪？ 能浪的浪，才是好浪！  每天 10:33 更新文章，每天掉亿点点头发... 源码精品专栏 原创 |... https://cloud.tencent.com/developer/article/1950586"> 22条API设计的最佳实践 - 腾讯云开发者社区-腾讯云 点击上方“芋道源码”，选择“设为星标” 管她前浪，还是后浪？ 能浪的浪，才是好浪！  每天 10:33 更新文章，每天掉亿点点头发… 源码精品专栏 原创 |… https://cloud.tencent.com/developer/article/1950586</a></p>
<p><a href="https://juejin.cn/post/7129685508589879327" title=" 为什么有公司规定所有接口都用Post？ - 掘金 看到这个标题，你肯定觉得离谱。怎么会有公司规定所有接口都用Post，是架构菜还是开发菜。这可不是夸大其词，这样的公司不少。在特定的情况下，规定使用Post可以减少不少的麻烦，一起看看。 https://juejin.cn/post/7129685508589879327"> 为什么有公司规定所有接口都用Post？ - 掘金 看到这个标题，你肯定觉得离谱。怎么会有公司规定所有接口都用Post，是架构菜还是开发菜。这可不是夸大其词，这样的公司不少。在特定的情况下，规定使用Post可以减少不少的麻烦，一起看看。 https://juejin.cn/post/7129685508589879327</a></p>
<p><a href="https://juejin.cn/post/6844904102862782478" title=" 前后端对接规范 - 掘金 409 : 请求操作和资源的当前状态存在冲突。主要使用场景在于实现并发控制 412 : 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。主要使用场景在于实现并发控制 无需在URI中增加版本号，通过HTTP请求头信息的字段中进行区分（或者在URI包含主版本信… https://juejin.cn/post/6844904102862782478"> 前后端对接规范 - 掘金 409 : 请求操作和资源的当前状态存在冲突。主要使用场景在于实现并发控制 412 : 服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。主要使用场景在于实现并发控制 无需在URI中增加版本号，通过HTTP请求头信息的字段中进行区分（或者在URI包含主版本信… https://juejin.cn/post/6844904102862782478</a></p>
<p><a href="https://its401.com/article/LucasXu01/105170358" title=" 由前后端数据处理分配引发的一些思考_许进进的博客-程序员ITS401_前后端数据处理分配 - 程序员ITS401 在写一些接口的时候，有时候会有一些接口数据，你没有办法直接使用，无论是计算也好，还是逻辑也好，都是需要再对数据进行一些处理才能使用。在处理完后，才能进行下一步操作，比如最直接的UI分类填充等。那么关于一些需要处理的数据，处理过程到底是放在前端还是后端好呢？以服务器端+移动端为例，我将我的一些思考记录如下，个人想法，欢迎讨论交流。首先放一个不严谨，但是最简单，而且绝大部分时候可行的方案（前端的小.. https://its401.com/article/LucasXu01/105170358"> 由前后端数据处理分配引发的一些思考_许进进的博客-程序员ITS401_前后端数据处理分配 - 程序员ITS401 在写一些接口的时候，有时候会有一些接口数据，你没有办法直接使用，无论是计算也好，还是逻辑也好，都是需要再对数据进行一些处理才能使用。在处理完后，才能进行下一步操作，比如最直接的UI分类填充等。那么关于一些需要处理的数据，处理过程到底是放在前端还是后端好呢？以服务器端+移动端为例，我将我的一些思考记录如下，个人想法，欢迎讨论交流。首先放一个不严谨，但是最简单，而且绝大部分时候可行的方案（前端的小.. https://its401.com/article/LucasXu01/105170358</a></p>
<p><a href="https://www.v2ex.com/t/701987" title="   https://www.v2ex.com/t/701987">   https://www.v2ex.com/t/701987</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>前端代码规范</title>
    <url>//pages/%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="一．编程规约"><a href="#一．编程规约" class="headerlink" title="一．编程规约"></a>一．编程规约</h1><h2 id="一-命名规范"><a href="#一-命名规范" class="headerlink" title="(一) 命名规范"></a>(一) 命名规范</h2><h3 id="1-1-1-项目命名"><a href="#1-1-1-项目命名" class="headerlink" title="1.1.1 项目命名"></a>1.1.1 项目命名</h3><p>全部采用小写方式，以中线分隔。</p>
<p>正例：<strong>mall-management-system</strong><br>反例：<strong>mall_management-system &#x2F; mallManagementSystem</strong></p>
<span id="more"></span>

<h3 id="1-1-2-目录命名"><a href="#1-1-2-目录命名" class="headerlink" title="1.1.2 目录命名"></a>1.1.2 目录命名</h3><p>全部采用小写方式， 以中划线分隔，有复数结构时，要采用复数命名法， 缩写不用复数。</p>
<p>正例： <strong>scripts &#x2F; styles &#x2F; components &#x2F; images &#x2F; utils &#x2F; layouts &#x2F; demo-styles &#x2F; demo-scripts &#x2F; img &#x2F; doc</strong><br>反例： <strong>script &#x2F; style &#x2F; demo_scripts &#x2F; demoStyles &#x2F; imgs &#x2F; docs</strong></p>
<p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名。</p>
<p>正例： <strong>head-search &#x2F; page-loading &#x2F; authorized &#x2F; notice-icon</strong><br>反例： <strong>HeadSearch &#x2F; PageLoading</strong></p>
<p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 kebab-case 命名。</p>
<p>正例： <strong>page-one &#x2F; shopping-car &#x2F; user-management</strong><br>反例： <strong>ShoppingCar &#x2F; UserManagement</strong></p>
<h3 id="1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名"><a href="#1-1-3-JS、CSS、SCSS、HTML、PNG-文件命名" class="headerlink" title="1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名"></a>1.1.3 JS、CSS、SCSS、HTML、PNG 文件命名</h3><p>全部采用小写方式， 以中划线分隔。</p>
<p>正例： <strong>render-dom.js &#x2F; signup.css &#x2F; index.html &#x2F; company-logo.png</strong><br>反例： <strong>renderDom.js &#x2F; UserManagement.html</strong></p>
<h3 id="1-1-4-命名严谨性"><a href="#1-1-4-命名严谨性" class="headerlink" title="1.1.4 命名严谨性"></a>1.1.4 命名严谨性</h3><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。 说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用</p>
<p>正例：<strong>henan &#x2F; luoyang &#x2F; rmb 等国际通用的名称，可视同英文</strong><br>反例：<strong>DaZhePromotion [打折] &#x2F; getPingfenByName() [评分] &#x2F; int 某变量 &#x3D; 3</strong></p>
<p>杜绝完全不规范的缩写，避免望文不知义：</p>
<p>反例：AbstractClass “缩写”命名成 AbsClass；condition “缩写”命名成 condi，此类随意缩写严重<br>降低了代码的可阅读性。</p>
<h2 id="二-HTML-规范-（Vue-Template-同样适用）"><a href="#二-HTML-规范-（Vue-Template-同样适用）" class="headerlink" title="(二) HTML 规范 （Vue Template 同样适用）"></a>(二) HTML 规范 （Vue Template 同样适用）</h2><h3 id="1-2-1-HTML-类型"><a href="#1-2-1-HTML-类型" class="headerlink" title="1.2.1 HTML 类型"></a>1.2.1 HTML 类型</h3><p>推荐使用 HTML5 的文档类型申明： &#x20;<br>（建议使用 text&#x2F;html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如 application&#x2F;xhtml+xml 在浏览器中的应用支持与优化空间都十分有限）。</p>
<ul>
<li>规定字符编码</li>
<li>IE 兼容模式</li>
<li>doctype 大写</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=Edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/company-logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Company&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-2-缩进"><a href="#1-2-2-缩进" class="headerlink" title="1.2.2 缩进"></a>1.2.2 缩进</h3><p>缩进使用 2 个空格（一个 tab）</p>
<p>嵌套的节点应该缩进。</p>
<h3 id="1-2-3-分块注释"><a href="#1-2-3-分块注释" class="headerlink" title="1.2.3 分块注释"></a>1.2.3 分块注释</h3><p>在每一个块状元素，列表元素和表格元素后，加上一对 HTML 注释。注释格式</p>
<p>正例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 头部 start --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片会把 a 标签给撑开，所以不用设置 a 标签的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/header.jpg&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- header 头部 end --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-4-语义化标签"><a href="#1-2-4-语义化标签" class="headerlink" title="1.2.4 语义化标签"></a>1.2.4 语义化标签</h3><p>HTML5 中新增很多语义化标签，所以优先使用语义化标签，避免一个页面都是 div 或者 p 标签</p>
<p>正例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>反例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-5-引号"><a href="#1-2-5-引号" class="headerlink" title="1.2.5 引号"></a>1.2.5 引号</h3><p>使用双引号 (“ “) 而不是单引号 (‘ ‘) 。</p>
<h2 id="三-CSS-规范"><a href="#三-CSS-规范" class="headerlink" title="(三) CSS 规范"></a>(三) CSS 规范</h2><h3 id="1-3-1-命名"><a href="#1-3-1-命名" class="headerlink" title="1.3.1 命名"></a>1.3.1 命名</h3><ul>
<li>类名使用小写字母，以中划线分隔</li>
<li>id 采用驼峰式命名</li>
<li>scss 中的变量、函数、混合、placeholder 采用驼峰式命名</li>
</ul>
<p>ID 和 class 的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称</p>
<p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fw-800</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.heavy</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">800</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.important</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="1-3-2-选择器"><a href="#1-3-2-选择器" class="headerlink" title="1.3.2 选择器"></a>1.3.2 选择器</h3><p>1) css 选择器中避免使用标签名 &#x20;</p>
<p>从结构、表现、行为分离的原则来看，应该尽量避免 css 中出现 HTML 标签，并且在 css 选择器中出现标签名会存在潜在的问题。</p>
<p>2) 很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。然而，在任何情况下，这是一个非常不好的做法。如果你不写很通用的，需要匹配到 DOM 末端的选择器， 你应该总是考虑直接子选择器。</p>
<p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &gt; <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-3-尽量使用缩写属性"><a href="#1-3-3-尽量使用缩写属性" class="headerlink" title="1.3.3 尽量使用缩写属性"></a>1.3.3 尽量使用缩写属性</h3><p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top-style</span>: none;</span><br><span class="line"><span class="attribute">font-family</span>: palatino, georgia, serif;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line"><span class="attribute">padding-bottom</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">padding-right</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">0</span>;</span><br></pre></td></tr></table></figure>



<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">100%</span>/<span class="number">1.6</span> palatino, georgia, serif;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span> <span class="number">2em</span>;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-4-每个选择器及属性独占一行"><a href="#1-3-4-每个选择器及属性独占一行" class="headerlink" title="1.3.4 每个选择器及属性独占一行"></a>1.3.4 每个选择器及属性独占一行</h3><p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;<span class="attribute">color</span>:<span class="number">#fff</span>;<span class="attribute">background</span>:<span class="number">#00a0e9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#00a0e9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="1-3-5-省略-0-后面的单位"><a href="#1-3-5-省略-0-后面的单位" class="headerlink" title="1.3.5 省略 0 后面的单位"></a>1.3.5 省略 0 后面的单位</h3><p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式"><a href="#1-3-6-避免使用-ID-选择器及全局标签选择器防止污染全局样式" class="headerlink" title="1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式"></a>1.3.6 避免使用 ID 选择器及全局标签选择器防止污染全局样式</h3><p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#header</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="四-SCSS-规范"><a href="#四-SCSS-规范" class="headerlink" title="(四) SCSS 规范"></a>(四) SCSS 规范</h2><h3 id="1-4-1-代码组织"><a href="#1-4-1-代码组织" class="headerlink" title="1.4.1 代码组织"></a>1.4.1 代码组织</h3><h4 id="1-将公共-less-文件放置在-style-scss-common-文件夹"><a href="#1-将公共-less-文件放置在-style-scss-common-文件夹" class="headerlink" title="1) 将公共 less 文件放置在 style &#x2F; scss &#x2F; common 文件夹"></a>1) 将公共 less 文件放置在 style &#x2F; scss &#x2F; common 文件夹</h4><p>例:&#x2F;&#x2F; color.scss,common.scss</p>
<h4 id="2-按以下顺序组织"><a href="#2-按以下顺序组织" class="headerlink" title="2) 按以下顺序组织"></a>2) 按以下顺序组织</h4><ul>
<li>1、@import; &#x20;</li>
<li>2、变量声明; &#x20;</li>
<li>3、样式声明</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;mixins/size.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@default-text-color</span>: #<span class="number">333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="1-4-2-避免嵌套层级过多"><a href="#1-4-2-避免嵌套层级过多" class="headerlink" title="1.4.2 避免嵌套层级过多"></a>1.4.2 避免嵌套层级过多</h3><p>将嵌套深度限制在 3 级。对于超过 4 级的嵌套，给予重新评估。这可以避免出现过于详实的 CSS 选择器。 &#x20;<br>避免大量的嵌套规则。当可读性受到影响时，将之打断。推荐避免出现多于 20 行的嵌套规则出现</p>
<p>不推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">  <span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="selector-class">.name</span>&#123;</span><br><span class="line">       <span class="attribute">color</span>:<span class="number">#fff</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>推荐：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main-title</span>&#123;</span><br><span class="line">   <span class="selector-class">.name</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:<span class="number">#fff</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="五-Javascript-规范"><a href="#五-Javascript-规范" class="headerlink" title="(五) Javascript 规范"></a>(五) Javascript 规范</h2><h3 id="1-5-1-命名"><a href="#1-5-1-命名" class="headerlink" title="1.5.1 命名"></a>1.5.1 命名</h3><h4 id="1、采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"><a href="#1、采用小写驼峰命名-lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束" class="headerlink" title="1、采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束"></a><strong>1、采用小写驼峰命名 lowerCamelCase，代码中的命名均不能以下划线，也不能以下划线或美元符号结束</strong></h4><p>反例： <code>_name / name_ / name$</code></p>
<h4 id="2、方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。"><a href="#2、方法名、参数名、成员变量、局部变量都统一使用-lowerCamelCase-风格，必须遵从驼峰形式。" class="headerlink" title="2、方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。"></a><strong>2、方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</strong></h4><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p>
<h4 id="3、其中-method-方法命名必须是-动词-或者-动词-名词-形式"><a href="#3、其中-method-方法命名必须是-动词-或者-动词-名词-形式" class="headerlink" title="3、其中 method 方法命名必须是 动词 或者 动词 + 名词 形式"></a><strong>3、其中 method 方法命名必须是 动词 或者 动词 + 名词 形式</strong></h4><p>正例：<code>saveShopCarData /openShopCarInfoDialog</code></p>
<p>反例：<code>save / open / show / go</code></p>
<p><strong>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">add / update / delete / detail / get</span><br></pre></td></tr></table></figure>



<p><strong>附： 函数方法常用的动词:</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">get 获取/set 设置,</span><br><span class="line">add 增加/remove 删除</span><br><span class="line">create 创建/destory 移除</span><br><span class="line">start 启动/stop 停止</span><br><span class="line">open 打开/close 关闭,</span><br><span class="line">read 读取/write 写入</span><br><span class="line">load 载入/save 保存,</span><br><span class="line">create 创建/destroy 销毁</span><br><span class="line">begin 开始/end 结束,</span><br><span class="line">backup 备份/restore 恢复</span><br><span class="line">import 导入/export 导出,</span><br><span class="line">split 分割/merge 合并</span><br><span class="line">inject 注入/extract 提取,</span><br><span class="line">attach 附着/detach 脱离</span><br><span class="line">bind 绑定/separate 分离,</span><br><span class="line">view 查看/browse 浏览</span><br><span class="line">edit 编辑/modify 修改,</span><br><span class="line">select 选取/mark 标记</span><br><span class="line">copy 复制/paste 粘贴,</span><br><span class="line">undo 撤销/redo 重做</span><br><span class="line">insert 插入/delete 移除,</span><br><span class="line">add 加入/append 添加</span><br><span class="line">clean 清理/clear 清除,</span><br><span class="line">index 索引/sort 排序</span><br><span class="line">find 查找/search 搜索,</span><br><span class="line">increase 增加/decrease 减少</span><br><span class="line">play 播放/pause 暂停,</span><br><span class="line">launch 启动/run 运行</span><br><span class="line">compile 编译/execute 执行,</span><br><span class="line">debug 调试/trace 跟踪</span><br><span class="line">observe 观察/listen 监听,</span><br><span class="line">build 构建/publish 发布</span><br><span class="line">input 输入/output 输出,</span><br><span class="line">encode 编码/decode 解码</span><br><span class="line">encrypt 加密/decrypt 解密,</span><br><span class="line">compress 压缩/decompress 解压缩</span><br><span class="line">pack 打包/unpack 解包,</span><br><span class="line">parse 解析/emit 生成</span><br><span class="line">connect 连接/disconnect 断开,</span><br><span class="line">send 发送/receive 接收</span><br><span class="line">download 下载/upload 上传,</span><br><span class="line">refresh 刷新/synchronize 同步</span><br><span class="line">update 更新/revert 复原,</span><br><span class="line">lock 锁定/unlock 解锁</span><br><span class="line">check out 签出/check in 签入,</span><br><span class="line">submit 提交/commit 交付</span><br><span class="line">push 推/pull 拉,</span><br><span class="line">expand 展开/collapse 折叠</span><br><span class="line">begin 起始/end 结束,</span><br><span class="line">start 开始/finish 完成</span><br><span class="line">enter 进入/exit 退出,</span><br><span class="line">abort 放弃/quit 离开</span><br><span class="line">obsolete 废弃/depreciate 废旧,</span><br><span class="line">collect 收集/aggregate 聚集</span><br></pre></td></tr></table></figure>



<h4 id="4、-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"><a href="#4、-常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。" class="headerlink" title="4、 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。"></a><strong>4、 常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</strong></h4><p>正例： <code>MAX_STOCK_COUNT</code></p>
<p>反例： <code>MAX_COUNT</code></p>
<h3 id="1-5-2-代码格式"><a href="#1-5-2-代码格式" class="headerlink" title="1.5.2 代码格式"></a>1.5.2 代码格式</h3><p>1) 使用 2 个空格进行缩进</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">  x += <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2) 不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。</p>
<p>说明：任何情形，没有必要插入多个空行进行隔开。</p>
<h3 id="1-5-3-字符串"><a href="#1-5-3-字符串" class="headerlink" title="1.5.3 字符串"></a>1.5.3 字符串</h3><p>统一使用单引号 (‘)，不使用双引号 (“)。这在创建 HTML 字符串非常有好处：</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> testDiv = <span class="string">&#x27;&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> testDiv = <span class="string">&quot;&lt;div id=&#x27;test&#x27;&gt;&lt;/div&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="1-5-4-对象声明"><a href="#1-5-4-对象声明" class="headerlink" title="1.5.4 对象声明"></a>1.5.4 对象声明</h3><p>1) 使用字面值创建对象</p>
<p>正例： <code>let user = &#123;&#125;;</code></p>
<p>反例： <code>let user = new Object();</code></p>
<p>2) 使用字面量来代替对象构造器</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">user.<span class="property">age</span> = <span class="number">0</span>;</span><br><span class="line">user.<span class="property">name</span> = <span class="number">0</span>;</span><br><span class="line">user.<span class="property">city</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>





<h3 id="1-5-5-使用-ES6"><a href="#1-5-5-使用-ES6" class="headerlink" title="1.5.5 使用 ES6+"></a>1.5.5 使用 ES6+</h3><p>必须优先使用 ES6,ES7 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p>
<p>必须强制使用 ES6, ES7 的新语法，比如箭头函数、await&#x2F;async，解构，let，for…of 等等</p>
<h3 id="1-5-6-括号"><a href="#1-5-6-括号" class="headerlink" title="1.5.6 括号"></a>1.5.6 括号</h3><p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) <span class="title function_">doSomething</span>();</span><br></pre></td></tr></table></figure>



<h3 id="1-5-7-undefined-判断"><a href="#1-5-7-undefined-判断" class="headerlink" title="1.5.7 undefined 判断"></a>1.5.7 undefined 判断</h3><p>永远不要直接使用 <code>undefined</code> 进行变量判断；使用 typeof 和字符串 <code>&#39;undefined&#39;</code> 对变量进行判断。</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> person === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反例：1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// person 为 null 也是 true</span></span><br><span class="line"><span class="keyword">if</span> (person == <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反例：2 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="MDN 也有说明">MDN 也有说明</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (person === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript 设计问题， undefined 可以全局作用域中被当作标识符（变量名）来使用</span></span><br><span class="line"><span class="comment">// 因为 undefined 不是一个保留字</span></span><br><span class="line"><span class="comment">// 不要这样做！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 &#x27;foo string&#x27; PS：说明 undefined 的值和类型都已经改变</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span> = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>, <span class="keyword">typeof</span> <span class="literal">undefined</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 &#x27;foo string&#x27; PS：说明 undefined 的值和类型都已经改变</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="literal">undefined</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>, <span class="keyword">typeof</span> <span class="literal">undefined</span>)</span><br><span class="line">&#125;)(<span class="string">&#x27;foo&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="1-5-8-条件判断和循环最多三层"><a href="#1-5-8-条件判断和循环最多三层" class="headerlink" title="1.5.8 条件判断和循环最多三层"></a>1.5.8 条件判断和循环最多三层</h3><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p>
<h3 id="1-5-9-this-的转换命名"><a href="#1-5-9-this-的转换命名" class="headerlink" title="1.5.9 this 的转换命名"></a>1.5.9 this 的转换命名</h3><p>对上下文 <code>this</code> 的引用只能使用 <code>self</code> 来命名</p>
<h3 id="1-5-10-慎用-console-log"><a href="#1-5-10-慎用-console-log" class="headerlink" title="1.5.10 慎用 console.log"></a>1.5.10 慎用 console.log</h3><p>因 <code>console.log</code> 大量使用会有性能问题，所以在非 webpack 项目中谨慎使用 log 功能</p>
<h1 id="二、Vue-项目规范"><a href="#二、Vue-项目规范" class="headerlink" title="二、Vue 项目规范"></a>二、Vue 项目规范</h1><h2 id="一-Vue-编码基础"><a href="#一-Vue-编码基础" class="headerlink" title="(一) Vue 编码基础"></a>(一) Vue 编码基础</h2><blockquote>
<p>📌vue 项目规范以 Vue 官方规范 （<a href="https://vue.docschina.org/v2/style-guide/" title="https://cn.vuejs.org/v2/style-guide/）">https://cn.vuejs.org/v2/style-guide/）</a> 中的 A 规范为基础，在 其上面进行项目开发，故所有代码均遵守该规范。 请仔仔细细阅读 Vue 官方规范，切记，此为第一步。</p>
</blockquote>
<h3 id="2-1-1-组件规范"><a href="#2-1-1-组件规范" class="headerlink" title="2.1.1. 组件规范"></a>2.1.1. 组件规范</h3><h4 id="1-组件名为多个单词。"><a href="#1-组件名为多个单词。" class="headerlink" title="1) 组件名为多个单词。"></a>1) 组件名为多个单词。</h4><p>组件名应该始终是多个单词组成（大于等于 2），且命名规范为 <code>KebabCase</code> 格式。这样做可以避免跟现有的以及未来的 HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;TodoItem&#x27;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Todo&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;todo-item&#x27;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-组件文件名为-pascal-case-格式"><a href="#2-组件文件名为-pascal-case-格式" class="headerlink" title="2) 组件文件名为 pascal-case 格式"></a>2) 组件文件名为 pascal-case 格式</h4><p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">|- my-component.<span class="property">vue</span></span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">|- myComponent.<span class="property">vue</span></span><br><span class="line">|- <span class="title class_">MyComponent</span>.<span class="property">vue</span></span><br></pre></td></tr></table></figure>



<h4 id="3-基础组件文件名为-base-开头，使用完整单词而不是缩写"><a href="#3-基础组件文件名为-base-开头，使用完整单词而不是缩写" class="headerlink" title="3) 基础组件文件名为 base 开头，使用完整单词而不是缩写"></a>3) 基础组件文件名为 base 开头，使用完整单词而不是缩写</h4><p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">|- base-button.<span class="property">vue</span></span><br><span class="line">|- base-table.<span class="property">vue</span></span><br><span class="line">|- base-icon.<span class="property">vue</span></span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">|- <span class="title class_">MyButton</span>.<span class="property">vue</span></span><br><span class="line">|- <span class="title class_">VueTable</span>.<span class="property">vue</span></span><br><span class="line">|- <span class="title class_">Icon</span>.<span class="property">vue</span></span><br></pre></td></tr></table></figure>



<h4 id="4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名"><a href="#4-和父组件紧密耦合的子组件应该以父组件名作为前缀命名" class="headerlink" title="4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名"></a>4) 和父组件紧密耦合的子组件应该以父组件名作为前缀命名</h4><p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">|- todo-list.<span class="property">vue</span></span><br><span class="line">|- todo-list-item.<span class="property">vue</span></span><br><span class="line">|- todo-list-item-button.<span class="property">vue</span></span><br><span class="line">|- user-profile-options.<span class="property">vue</span> （完整单词）</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">components/</span><br><span class="line">|- <span class="title class_">TodoList</span>.<span class="property">vue</span></span><br><span class="line">|- <span class="title class_">TodoItem</span>.<span class="property">vue</span></span><br><span class="line">|- <span class="title class_">TodoButton</span>.<span class="property">vue</span></span><br><span class="line">|- <span class="title class_">UProfOpts</span>.<span class="property">vue</span> （使用了缩写）</span><br></pre></td></tr></table></figure>



<h4 id="5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。"><a href="#5-在-Template-模版中使用组件，应使用-PascalCase-模式，并且使用自闭合组件。" class="headerlink" title="5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。"></a>5) 在 Template 模版中使用组件，应使用 PascalCase 模式，并且使用自闭合组件。</h4><p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在单文件组件、字符串模板和 <span class="variable constant_">JSX</span> 中 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Row</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">:column</span>=<span class="string">&quot;data&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;my-component /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">row</span>&gt;</span><span class="tag">&lt;<span class="name">table</span> <span class="attr">:column</span>=<span class="string">&quot;data&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">row</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h4 id="6-组件的-data-必须是一个函数"><a href="#6-组件的-data-必须是一个函数" class="headerlink" title="6) 组件的 data 必须是一个函数"></a>6) 组件的 data 必须是一个函数</h4><p>当在组件中使用 data 属性的时候 (除了 new Vue 外的任何地方)，它的值必须是返回一个对象的函数。 因为如果直接是一个对象的话，子组件之间的属性值会互相影响。</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="7-Prop-定义应该尽量详细"><a href="#7-Prop-定义应该尽量详细" class="headerlink" title="7) Prop 定义应该尽量详细"></a>7) Prop 定义应该尽量详细</h4><ul>
<li>必须使用 camelCase 驼峰命名</li>
<li>必须指定类型</li>
<li>必须加上注释，表明其含义</li>
<li>必须加上 required 或者 default，两者二选其一</li>
<li>如果有业务需要，必须加上 validator 验证</li>
</ul>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="comment">// 组件状态，用于控制组件的颜色</span></span><br><span class="line">   <span class="attr">status</span>: &#123;</span><br><span class="line">     <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">     <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">     <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> [</span><br><span class="line">         <span class="string">&#x27;succ&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">         <span class="string">&#x27;error&#x27;</span></span><br><span class="line">       ].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">    <span class="comment">// 用户级别，用于显示皇冠个数</span></span><br><span class="line">   userLevel：&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="8-为组件样式设置作用域"><a href="#8-为组件样式设置作用域" class="headerlink" title="8) 为组件样式设置作用域"></a>8) 为组件样式设置作用域</h4><p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-close&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用 <span class="string">`scoped`</span> 特性 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.btn-close</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background-color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-close&quot;</span>&gt;</span>X<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- 没有使用 <span class="string">`scoped`</span> 特性 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.btn-close</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background-color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h4 id="9-如果特性元素较多，应该主动换行。"><a href="#9-如果特性元素较多，应该主动换行。" class="headerlink" title="9) 如果特性元素较多，应该主动换行。"></a>9) 如果特性元素较多，应该主动换行。</h4><p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span></span><br><span class="line">    foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span></span><br><span class="line">    foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span></span><br><span class="line"> /&gt;</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">MyComponent</span> foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span> foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span> foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span> foo=<span class="string">&quot;a&quot;</span> bar=<span class="string">&quot;b&quot;</span> baz=<span class="string">&quot;c&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-2-模板中使用简单的表达式"><a href="#2-1-2-模板中使用简单的表达式" class="headerlink" title="2.1.2. 模板中使用简单的表达式"></a>2.1.2. 模板中使用简单的表达式</h3><p>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; normalizedFullName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 复杂表达式已经移入一个计算属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">normalizedFullName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fullName</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">word</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> word[<span class="number">0</span>].<span class="title function_">toUpperCase</span>() + word.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       &#123;&#123;</span></span><br><span class="line"><span class="language-xml">          fullName.split(&#x27; &#x27;).map(function (word) &#123;</span></span><br><span class="line"><span class="language-xml">             return word[0].toUpperCase() + word.slice(1)</span></span><br><span class="line"><span class="language-xml">           &#125;).join(&#x27; &#x27;)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-3-指令都使用缩写形式"><a href="#2-1-3-指令都使用缩写形式" class="headerlink" title="2.1.3 指令都使用缩写形式"></a>2.1.3 指令都使用缩写形式</h3><p>指令推荐都使用缩写形式，(用 : 表示 v-bind: 、用 @ 表示 v-on: 和用 # 表示 v-slot:)</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  @input=<span class="string">&quot;onInput&quot;</span></span><br><span class="line">  @focus=<span class="string">&quot;onFocus&quot;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  v-<span class="attr">on</span>:input=<span class="string">&quot;onInput&quot;</span></span><br><span class="line">  @focus=<span class="string">&quot;onFocus&quot;</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-4-标签顺序保持一致"><a href="#2-1-4-标签顺序保持一致" class="headerlink" title="2.1.4 标签顺序保持一致"></a>2.1.4 标签顺序保持一致</h3><p>单文件组件应该总是让标签顺序保持为 `</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;...&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p>反例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;...&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span>...<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span>...<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h3 id="2-1-5-必须为-v-for-设置键值-key"><a href="#2-1-5-必须为-v-for-设置键值-key" class="headerlink" title="2.1.5 必须为 v-for 设置键值 key"></a>2.1.5 必须为 v-for 设置键值 key</h3><h3 id="2-1-6-v-show-与-v-if-选择"><a href="#2-1-6-v-show-与-v-if-选择" class="headerlink" title="2.1.6 v-show 与 v-if 选择"></a>2.1.6 v-show 与 v-if 选择</h3><p>如果运行时，需要非常频繁地切换，使用 v-show ；如果在运行时，条件很少改变，使用 v-if。</p>
<h3 id="2-1-7-script-标签内部结构顺序"><a href="#2-1-7-script-标签内部结构顺序" class="headerlink" title="2.1.7 script 标签内部结构顺序"></a>2.1.7 script 标签内部结构顺序</h3><p>components &gt; props &gt; data &gt; computed &gt; watch &gt; filter &gt; 钩子函数（钩子函数按其执行顺序）&gt; methods</p>
<h3 id="2-1-8-Vue-Router-规范"><a href="#2-1-8-Vue-Router-规范" class="headerlink" title="2.1.8 Vue Router 规范"></a>2.1.8 Vue Router 规范</h3><h4 id="1-页面跳转数据传递使用路由参数"><a href="#1-页面跳转数据传递使用路由参数" class="headerlink" title="1) 页面跳转数据传递使用路由参数"></a>1) 页面跳转数据传递使用路由参数</h4><p>页面跳转，例如 A 页面跳转到 B 页面，需要将 A 页面的数据传递到 B 页面，推荐使用 路由参数进行传参，而不是将需要传递的数据保存 vuex，然后在 B 页面取出 vuex 的数据，因为如果在 B 页面刷新会导致 vuex 数据丢失，导致 B 页面无法正常显示数据。</p>
<p>正例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> id = <span class="string">&#x27; 123&#x27;</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;userCenter&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">id</span>: id &#125; &#125;);</span><br></pre></td></tr></table></figure>



<h4 id="2-使用路由懒加载（延迟加载）机制"><a href="#2-使用路由懒加载（延迟加载）机制" class="headerlink" title="2) 使用路由懒加载（延迟加载）机制"></a>2) 使用路由懒加载（延迟加载）机制</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/uploadAttachment&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;uploadAttachment&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;上传附件&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/components/uploadAttachment/index.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h4 id="3-router-中的命名规范"><a href="#3-router-中的命名规范" class="headerlink" title="3) router 中的命名规范"></a>3) router 中的命名规范</h4><p>path、childrenPoints 命名规范采用 <code>kebab-case</code> 命名规范（尽量 Vue 文件的目录结构保持一致，因为目录、文件名都是 <code>kebab-case</code>，这样很方便找到对应的文件）</p>
<p>name 命名规范采用 <code>KebabCase</code> 命名规范且和 component 组件名保持一致！（因为要保持 keep-alive 特性，keep-alive 按照 component 的 name 进行缓存，所以两者必须高度保持一致）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态加载</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reload = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/reload&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;reload&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;动态加载&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;icon iconfont&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/reload/smart-reload-list&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;SmartReloadList&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;SmartReload&#x27;</span>,</span><br><span class="line">          <span class="attr">childrenPoints</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;查询&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;smart-reload-search&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;执行 reload&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;smart-reload-update&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">title</span>: <span class="string">&#x27;查看执行结果&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;smart-reload-result&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span></span><br><span class="line">          <span class="keyword">import</span>(<span class="string">&#x27;@/views/reload/smart-reload/smart-reload-list.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>



<h4 id="4-router-中的-path-命名规范"><a href="#4-router-中的-path-命名规范" class="headerlink" title="4) router 中的 path 命名规范"></a>4) router 中的 path 命名规范</h4><p>path 除了采用 <code>kebab-case</code> 命名规范以外，必须以 &#x2F; 开头，即使是 children 里的 path 也要以 &#x2F; 开头。如下示例</p>
<p>目的：</p>
<p>经常有这样的场景：某个页面有问题，要立刻找到这个 vue 文件，如果不用以&#x2F;开头，path 为 parent 和 children 组成的，可能经常需要在 router 文件里搜索多次才能找到，而如果以 &#x2F; 开头，则能立刻搜索到对应的组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/file&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;File&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;文件服务&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;ios-cloud-upload&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/file/file-list&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;FileList&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/file/file-list.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/file/file-add&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;FileAdd&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/file/file-add.vue&#x27;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/file/file-update&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;FileUpdate&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/file/file-update.vue&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





<h2 id="二-Vue-项目目录规范"><a href="#二-Vue-项目目录规范" class="headerlink" title="(二) Vue 项目目录规范"></a>(二) Vue 项目目录规范</h2><h3 id="2-2-1-基础"><a href="#2-2-1-基础" class="headerlink" title="2.2.1 基础"></a>2.2.1 基础</h3><p>vue 项目中的所有命名一定要与后端命名统一。</p>
<p>比如权限：后端 privilege，前端无论 router , store, api 等都必须使用 privielege 单词！</p>
<h3 id="2-2-2-使用-Vue-cli-脚手架"><a href="#2-2-2-使用-Vue-cli-脚手架" class="headerlink" title="2.2.2 使用 Vue-cli 脚手架"></a>2.2.2 使用 Vue-cli 脚手架</h3><p>使用 vue-cli3 来初始化项目，项目名按照上面的命名规范。</p>
<h3 id="2-2-3-目录说明"><a href="#2-2-3-目录说明" class="headerlink" title="2.2.3 目录说明"></a>2.2.3 目录说明</h3><p>目录名按照上面的命名规范，其中 components 组件用大写驼峰，其余除 components 组件目录外的所有目录均使用 kebab-case 命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">src                               源码目录</span><br><span class="line">|-- api                              所有api接口</span><br><span class="line">|-- assets                           静态资源，images, icons, styles等</span><br><span class="line">|-- components                       公用组件</span><br><span class="line">|-- config                           配置信息</span><br><span class="line">|-- constants                        常量信息，项目所有<span class="title class_">Enum</span>, 全局常量等</span><br><span class="line">|-- directives                       自定义指令</span><br><span class="line">|-- filters                          过滤器，全局工具</span><br><span class="line">|-- datas                            模拟数据，临时存放</span><br><span class="line">|-- lib                              外部引用的插件存放及修改文件</span><br><span class="line">|-- mock                             模拟接口，临时存放</span><br><span class="line">|-- plugins                          插件，全局使用</span><br><span class="line">|-- router                           路由，统一管理</span><br><span class="line">|-- store                            vuex, 统一管理</span><br><span class="line">|-- themes                           自定义样式主题</span><br><span class="line">|-- views                            视图目录</span><br><span class="line">|   |-- role                             role模块名</span><br><span class="line">|   |-- |-- role-list.<span class="property">vue</span>                    role列表页面</span><br><span class="line">|   |-- |-- role-add.<span class="property">vue</span>                     role新建页面</span><br><span class="line">|   |-- |-- role-update.<span class="property">vue</span>                  role更新页面</span><br><span class="line">|   |-- |-- index.<span class="property">less</span>                      role模块样式</span><br><span class="line">|   |-- |-- components                      role模块通用组件文件夹</span><br><span class="line">|   |-- employee                         employee模块</span><br></pre></td></tr></table></figure>



<h4 id="1-api-目录"><a href="#1-api-目录" class="headerlink" title="1) api 目录"></a>1) api 目录</h4><ul>
<li>文件、变量命名要与后端保持一致。</li>
<li>此目录对应后端 API 接口，按照后端一个 controller 一个 api js 文件。若项目较大时，可以按照业务划分子目录，并与后端保持一致。</li>
<li>api 中的方法名字要与后端 api url 尽量保持语义高度一致性。</li>
<li>对于 api 中的每个方法要添加注释，注释与后端 swagger 文档保持一致。</li>
</ul>
<p>正例：</p>
<p>后端 url： EmployeeController.java</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">/employee/add</span><br><span class="line">/employee/<span class="keyword">delete</span>/&#123;id&#125;</span><br><span class="line">/employee/update</span><br></pre></td></tr></table></figure>



<p>前端： employee.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加员工</span></span><br><span class="line"><span class="attr">addEmployee</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">postAxios</span>(<span class="string">&#x27;/employee/add&#x27;</span>, data)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 更新员工信息</span></span><br><span class="line"><span class="attr">updateEmployee</span>: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">postAxios</span>(<span class="string">&#x27;/employee/update&#x27;</span>, data)</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">// 删除员工</span></span><br><span class="line"><span class="attr">deleteEmployee</span>: <span class="function">(<span class="params">employeeId</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">postAxios</span>(<span class="string">&#x27;/employee/delete/&#x27;</span> + employeeId)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h4 id="2-assets-目录"><a href="#2-assets-目录" class="headerlink" title="2) assets 目录"></a>2) assets 目录</h4><p>assets 为静态资源，里面存放 images, styles, icons 等静态资源，静态资源命名格式为 kebab-case</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">|assets</span><br><span class="line">|-- icons</span><br><span class="line">|-- images</span><br><span class="line">|   |-- background-color.<span class="property">png</span></span><br><span class="line">|   |-- upload-header.<span class="property">png</span></span><br><span class="line">|-- styles</span><br></pre></td></tr></table></figure>



<h4 id="3-components-目录"><a href="#3-components-目录" class="headerlink" title="3) components 目录"></a>3) components 目录</h4><p>此目录应按照组件进行目录划分，目录命名为 KebabCase，组件命名规则也为 KebabCase</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">|components</span><br><span class="line">|-- error-log</span><br><span class="line">|   |-- index.<span class="property">vue</span></span><br><span class="line">|   |-- index.<span class="property">less</span></span><br><span class="line">|-- markdown-editor</span><br><span class="line">|   |-- index.<span class="property">vue</span></span><br><span class="line">|   |-- index.<span class="property">js</span></span><br><span class="line">|-- kebab-<span class="keyword">case</span></span><br></pre></td></tr></table></figure>



<h4 id="4-constants-目录"><a href="#4-constants-目录" class="headerlink" title="4) constants 目录"></a>4) constants 目录</h4><p>此目录存放项目所有常量，如果常量在 vue 中使用，请使用 vue-enum 插件 (<a href="https://www.npmjs.com/package/vue-enum" title="https://www.npmjs.com/package/vue-enum">https://www.npmjs.com/package/vue-enum</a>)</p>
<p>目录结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">|constants</span><br><span class="line">|-- index.<span class="property">js</span></span><br><span class="line">|-- role.<span class="property">js</span></span><br><span class="line">|-- employee.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p>例子： employee.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">EMPLOYEE_STATUS</span> = &#123;</span><br><span class="line">  <span class="attr">NORMAL</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;正常&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">DISABLED</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;禁用&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">DELETED</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;已删除&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">EMPLOYEE_ACCOUNT_TYPE</span> = &#123;</span><br><span class="line">  <span class="attr">QQ</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;QQ 登录&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">WECHAT</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;微信登录&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">DINGDING</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;钉钉登录&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">USERNAME</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">desc</span>: <span class="string">&#x27;用户名密码登录&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="variable constant_">EMPLOYEE_STATUS</span>,</span><br><span class="line">  <span class="variable constant_">EMPLOYEE_ACCOUNT_TYPE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="5-router-与-store-目录"><a href="#5-router-与-store-目录" class="headerlink" title="5) router 与 store 目录"></a>5) router 与 store 目录</h4><p>这两个目录一定要将业务进行拆分，不能放到一个 js 文件里。</p>
<p>router 尽量按照 views 中的结构保持一致</p>
<p>store 按照业务进行拆分不同的 js 文件</p>
<h4 id="6-views-目录"><a href="#6-views-目录" class="headerlink" title="6) views 目录"></a>6) views 目录</h4><ul>
<li>命名要与后端、router、api 等保持一致</li>
<li>components 中组件要使用 PascalCase 规则</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">|-- views                            视图目录</span><br><span class="line">|   |-- role                             role模块名</span><br><span class="line">|   |   |-- role-list.<span class="property">vue</span>                    role列表页面</span><br><span class="line">|   |   |-- role-add.<span class="property">vue</span>                     role新建页面</span><br><span class="line">|   |   |-- role-update.<span class="property">vue</span>                  role更新页面</span><br><span class="line">|   |   |-- index.<span class="property">less</span>                      role模块样式</span><br><span class="line">|   |   |-- components                      role模块通用组件文件夹</span><br><span class="line">|   |   |   |-- role-header.<span class="property">vue</span>                        role头部组件</span><br><span class="line">|   |   |   |-- role-modal.<span class="property">vue</span>                         role弹出框组件</span><br><span class="line">|   |-- employee                         employee模块</span><br><span class="line">|   |-- behavior-log                      行为日志log模块</span><br><span class="line">|   |-- code-generator                    代码生成器模块</span><br></pre></td></tr></table></figure>



<h3 id="2-2-4-注释说明"><a href="#2-2-4-注释说明" class="headerlink" title="2.2.4 注释说明"></a>2.2.4 注释说明</h3><p>整理必须加注释的地方</p>
<ul>
<li>公共组件使用说明</li>
<li>api 目录的接口 js 文件必须加注释</li>
<li>store 中的 state, mutation, action 等必须加注释</li>
<li>vue 文件中的 template 必须加注释，若文件较大添加 start end 注释</li>
<li>vue 文件的 methods，每个 method 必须添加注释</li>
<li>vue 文件的 data，非常见单词要加注释</li>
</ul>
<h3 id="2-2-5-其他"><a href="#2-2-5-其他" class="headerlink" title="2.2.5 其他"></a>2.2.5 其他</h3><h4 id="1-尽量不要手动操作-DOM"><a href="#1-尽量不要手动操作-DOM" class="headerlink" title="1) 尽量不要手动操作 DOM"></a>1) 尽量不要手动操作 DOM</h4><p>因使用 vue 框架，所以在项目开发中尽量使用 vue 的数据驱动更新 DOM，尽量（不到万不得已）不要手动操作 DOM，包括：增删改 dom 元素、以及更改样式、添加事件等。</p>
<h4 id="2-删除无用代码"><a href="#2-删除无用代码" class="headerlink" title="2) 删除无用代码"></a>2) 删除无用代码</h4><p>因使用了 git&#x2F;svn 等代码版本工具，对于无用代码必须及时删除，例如：一些调试的 console 语句、无用的弃用功能代码。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>NEW</title>
    <url>//pages/new/</url>
    <content><![CDATA[<p><img src="/pages/new/01.png" alt="Image Description"></p>
]]></content>
  </entry>
</search>
